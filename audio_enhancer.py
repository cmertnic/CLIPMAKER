import os
from pydub import AudioSegment
from pydub.effects import compress_dynamic_range, high_pass_filter, low_pass_filter
import tempfile
from pathlib import Path

class AudioPreprocessor:
    def __init__(self):
        self.sample_rate = 16000
    
    def enhance_audio(self, audio_path, output_path=None):
        """–£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        try:
            print("üîä –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ...")
            
            audio = AudioSegment.from_file(audio_path)
            enhanced_audio = self._apply_enhancements(audio)
            
            if not output_path:
                temp_dir = tempfile.gettempdir()
                output_path = os.path.join(temp_dir, f"enhanced_{os.path.basename(audio_path)}.wav")
            
            enhanced_audio.export(output_path, format="wav")
            print(f"‚úÖ –ê—É–¥–∏–æ —É–ª—É—á—à–µ–Ω–æ: {output_path}")
            return output_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return audio_path
    
    def _apply_enhancements(self, audio):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –∫ –∞—É–¥–∏–æ"""
        # 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if audio.channels > 1:
            audio = audio.set_channels(1)
        
        # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sample rate –¥–ª—è Whisper
        if audio.frame_rate != self.sample_rate:
            audio = audio.set_frame_rate(self.sample_rate)
        
        # 3. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        audio = self._normalize_volume(audio)
        
        # 4. –®—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ (–ø—Ä–æ—Å—Ç–æ–µ)
        audio = self._reduce_noise(audio)
        
        # 5. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç
        audio = self._enhance_high_frequencies(audio)
        
        return audio
    
    def _normalize_volume(self, audio):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å"""
        target_dBFS = -20.0
        change_in_dBFS = target_dBFS - audio.dBFS
        return audio.apply_gain(change_in_dBFS)
    
    def _reduce_noise(self, audio):
        """–ü—Ä–æ—Å—Ç–æ–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ"""
        # –û–±—Ä–µ–∑–∞–µ–º –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã –≥–¥–µ –æ–±—ã—á–Ω–æ —à—É–º
        return low_pass_filter(audio, 8000)
    
    def _enhance_high_frequencies(self, audio):
        """–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ—Å—Ç–∏"""
        # –£–±–∏—Ä–∞–µ–º –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã (–≥—É–ª)
        return high_pass_filter(audio, 80)