import cv2
import numpy as np
from moviepy.editor import VideoFileClip, ColorClip, CompositeVideoClip
from moviepy.video.fx.all import resize
from subtitle_engine import crop_to_shorts_format
from utils import hex_to_rgb, log
from models import FrameSettings

def create_frame_clip(video_clip: VideoFileClip, frame_settings: FrameSettings) -> VideoFileClip:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ —Å solid —Ä–∞–º–∫–∞–º–∏ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    try:
        # –ï—Å–ª–∏ —Ä–∞–º–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–µ–∑–∫—É –ø–æ–¥ —à–æ—Ä—Ç—Å
        if not frame_settings.add_frame:
            return crop_to_shorts_format(video_clip, lambda msg, level: None)  # –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        target_size = frame_settings.target_size  # (1080, 1920)
        frame_color = frame_settings.frame_color
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        original_w, original_h = video_clip.size
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± —á—Ç–æ–±—ã –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–ª–µ–∑–ª–æ –≤ target_size (—Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏)
        scale_x = target_size[0] / original_w
        scale_y = target_size[1] / original_h
        scale = min(scale_x, scale_y)  # –ë–µ—Ä–µ–º –º–µ–Ω—å—à–∏–π –º–∞—Å—à—Ç–∞–± —á—Ç–æ–±—ã –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–ª–µ–∑–ª–æ
        
        # –†–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        main_width = int(original_w * scale)
        main_height = int(original_h * scale)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ
        main_video = video_clip.resize((main_width, main_height))
        
        # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω
        from moviepy.editor import ColorClip
        background = ColorClip(size=target_size, color=hex_to_rgb(frame_color))
        background = background.set_duration(video_clip.duration)
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        x_pos = (target_size[0] - main_width) // 2
        y_pos = (target_size[1] - main_height) // 2
        
        main_video = main_video.set_position((x_pos, y_pos))
        
        # –ö–æ–º–ø–æ–∑–∏—Ä—É–µ–º: —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω + –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ
        final_video = CompositeVideoClip([
            background,
            main_video
        ])
        
        return final_video
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è solid —Ä–∞–º–∫–∏: {e}", "ERROR")
        return video_clip

def create_blurred_frame_clip(video_clip, frame_settings):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω –∏–∑ —Ç–æ–≥–æ –∂–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    try:
        # –ï—Å–ª–∏ —Ä–∞–º–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–µ–∑–∫—É –ø–æ–¥ —à–æ—Ä—Ç—Å
        if not frame_settings.add_frame:
            return crop_to_shorts_format(video_clip, lambda msg, level: None)  # –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        target_size = frame_settings.target_size  # (1080, 1920)
        blur_strength = frame_settings.blur_strength
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º blur_strength - —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if blur_strength <= 0:
            blur_strength = 51  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        elif blur_strength % 2 == 0:  # –µ—Å–ª–∏ —á–µ—Ç–Ω–æ–µ
            blur_strength += 1  # –¥–µ–ª–∞–µ–º –Ω–µ—á–µ—Ç–Ω—ã–º
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        blur_strength = min(blur_strength, 99)  # –º–∞–∫—Å–∏–º—É–º 99
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        original_w, original_h = video_clip.size
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± —á—Ç–æ–±—ã –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–ª–µ–∑–ª–æ –≤ target_size (—Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏)
        scale_x = target_size[0] / original_w
        scale_y = target_size[1] / original_h
        scale = min(scale_x, scale_y)  # –ë–µ—Ä–µ–º –º–µ–Ω—å—à–∏–π –º–∞—Å—à—Ç–∞–± —á—Ç–æ–±—ã –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–ª–µ–∑–ª–æ
        
        # –†–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–Ω–µ —Ä–∞–∑–º—ã—Ç–æ–≥–æ)
        main_width = int(original_w * scale)
        main_height = int(original_h * scale)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ
        main_video = video_clip.resize((main_width, main_height))
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ –≤–µ—Å—å —Ä–∞–∑–º–µ—Ä —à–æ—Ä—Ç—Å
        blurred_bg = video_clip.resize(target_size)
        blurred_bg = blurred_bg.fl_image(lambda frame: cv2.GaussianBlur(frame, (blur_strength, blur_strength), 0))
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        x_pos = (target_size[0] - main_width) // 2
        y_pos = (target_size[1] - main_height) // 2
        
        main_video = main_video.set_position((x_pos, y_pos))
        
        # –ö–æ–º–ø–æ–∑–∏—Ä—É–µ–º: —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω + –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ
        final_video = CompositeVideoClip([
            blurred_bg,
            main_video
        ])
        
        return final_video
        
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º—ã—Ç–æ–π —Ä–∞–º–∫–∏: {e}")

def crop_to_shorts_format(clip, log_func):
    """–°—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –ø–æ–¥ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–≤–æ –≤–µ—Å—å —Ä–∞–∑–º–µ—Ä)"""
    width, height = clip.size
    
    log_func(f"üìè –ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}", "INFO")
    
    # –¶–µ–ª–µ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è Shorts (9:16)
    target_ratio = 9/16
    current_ratio = width / height
    
    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    if current_ratio > target_ratio:
        # –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–æ–µ - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –±–æ–∫–∞–º
        new_width = int(height * target_ratio)
        new_height = height
        x_center = width // 2
        x1 = x_center - new_width // 2
        x2 = x1 + new_width
        cropped_clip = clip.crop(x1=x1, y1=0, x2=x2, y2=height)
    else:
        # –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ - –æ–±—Ä–µ–∑–∞–µ–º —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
        new_width = width
        new_height = int(width / target_ratio)
        y_center = height // 2
        y1 = y_center - new_height // 2
        y2 = y1 + new_height
        cropped_clip = clip.crop(x1=0, y1=y1, x2=width, y2=y2)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
    final_clip = cropped_clip.resize(height=1920)
    
    log_func(f"üéØ –û–±—Ä–µ–∑–∫–∞ –ø–æ–¥ Shorts: {final_clip.w}x{final_clip.h}", "INFO")
    return final_clip
def crop_to_vertical_with_frame(clip: VideoFileClip, frame_settings: FrameSettings) -> VideoFileClip:
    """–û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –ø–æ–¥ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ä–∞–º–∫–∞–º–∏"""
    if not frame_settings.add_frame:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º crop_to_shorts_format –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ 1080x1920
        def simple_log(msg, level):
            if level == "ERROR":
                print(f"‚ùå {msg}")
            elif level == "INFO":
                print(f"‚ÑπÔ∏è {msg}")
        return crop_to_shorts_format(clip, simple_log)
    
    if frame_settings.frame_style == "blur":
        return create_blurred_frame_clip(clip, frame_settings)
    else:
        return create_frame_clip(clip, frame_settings)

def crop_to_vertical(clip: VideoFileClip, target_ratio: float = 9/16) -> VideoFileClip:
    """–û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –ø–æ–¥ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (9:16 –¥–ª—è Shorts/Reels)"""
    w, h = clip.size
    
    target_width = int(h * target_ratio)
    
    if target_width < w:
        x_center = w / 2
        x1 = int(x_center - target_width / 2)
        x2 = int(x_center + target_width / 2)
        return clip.crop(x1=x1, y1=0, x2=x2, y2=h)
    else:
        return clip