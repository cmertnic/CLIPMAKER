import pathlib
import os
import subprocess
import sys
from pathlib import Path

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
MAX_WORKERS = max(1, os.cpu_count() - 1)

print(f"üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {MAX_WORKERS} –ø–æ—Ç–æ–∫–æ–≤ (CPU: {os.cpu_count()})")

def get_asset_path(filename):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –≤ exe –∏ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    if getattr(sys, 'frozen', False):
        # –í exe —Ä–µ–∂–∏–º–µ
        base_path = Path(sys._MEIPASS)
    else:
        # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
        base_path = Path(__file__).parent
    
    # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç
    possible_paths = [
        base_path / 'assets' / filename,
        base_path / filename,
        Path('assets') / filename,
        Path(filename)
    ]
    
    for path in possible_paths:
        if path.exists():
            return str(path)
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None

def get_safe_font_path(font_name):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —à—Ä–∏—Ñ—Ç—É"""
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if '.' not in font_name:
        return font_name
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞, –∏—â–µ–º –≤ assets
    asset_path = get_asset_path(font_name)
    
    if asset_path and os.path.exists(asset_path):
        return asset_path
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
    try:
        import matplotlib.font_manager as fm
        system_fonts = [
            "Arial", "Helvetica", "Tahoma", "Verdana", 
            "DejaVu Sans", "Liberation Sans", "Courier New",
            "Times New Roman"
        ]
        
        for font in system_fonts:
            try:
                font_path = fm.findfont(fm.FontProperties(family=font))
                if font_path and os.path.exists(font_path):
                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç: {font}")
                    return font_path
            except:
                continue
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Arial
    return "Arial"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CFG = {
    "OUTPUT_DIR": pathlib.Path("output"),
    "TEMP_DIR": pathlib.Path("temp"),
    "STATE_FILE": pathlib.Path("state.json"),
    "SUBTITLE_SETTINGS": {
        "font": "Arial",  # –°–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞
        "font_size": 52,
        "font_color": "#FFFFFF",
        "bg_color": "#000000",
        "bg_opacity": 0.7,
        "stroke_color": "#FFFFFF",
        "stroke_width": 3,
        "position": "bottom",
        "margin": 120,
        "alignment": "center",
        "whisper_model": "base",
        "language": "ru",
        "style": "boxed",
        "line_spacing": 8,
        "max_lines": 2,
        "min_segment_duration": 0.5,  
        "max_segment_duration": 15.0, 
        "animation": True,
        "fixed_size": True,
        "max_chars_per_line": 30,
        "confidence_threshold":-1.0
    },
    "FRAME_SETTINGS": {
        "add_frame": True,
        "frame_color": "#000000",
        "frame_width": 50,
        "frame_style": "solid",
        "blur_intensity": 10
    },
    "VERBOSE_LOGGING": True
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
FFMPEG_BINARY = os.getenv('FFMPEG_BINARY', 'ffmpeg-imageio')
IMAGEMAGICK_BINARY = "C:\\Program Files\\ImageMagick-7.0.8-Q16\\magick.exe"

OUT = CFG["OUTPUT_DIR"]

def setup_imagemagick():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ImageMagick –¥–ª—è MoviePy"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω—ã–π –ø—É—Ç—å –∫ magick.exe
        result = subprocess.run(['where', 'magick'], capture_output=True, text=True, shell=True)
        if result.returncode == 0:
            magick_path = result.stdout.strip().split('\n')[0]
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ .exe
            if not magick_path.endswith('.exe'):
                magick_path += '.exe'
            
            print(f"‚úÖ ImageMagick –Ω–∞–π–¥–µ–Ω: {magick_path}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            os.environ['IMAGEMAGICK_BINARY'] = magick_path
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MoviePy
            try:
                from moviepy.config import change_settings
                change_settings({"IMAGEMAGICK_BINARY": magick_path})
                print(f"‚úÖ MoviePy –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å: {magick_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MoviePy: {e}")
            
            return True
        else:
            print("‚ùå ImageMagick –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ 'where' –∫–æ–º–∞–Ω–¥—É")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ImageMagick: {e}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg
    try:
        result = subprocess.run(['ffmpeg', '-version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå FFmpeg –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ImageMagick
    setup_imagemagick()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
    font_path = get_safe_font_path("Arial")
    if font_path and font_path != "Arial":
        print(f"‚úÖ –®—Ä–∏—Ñ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã: {os.path.basename(font_path)}")
    else:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if __name__ != "__main__":
    check_dependencies()