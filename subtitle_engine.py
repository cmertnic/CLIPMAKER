import whisper
from moviepy.editor import VideoFileClip, TextClip, CompositeVideoClip
from utils import format_subtitle_text, log
from models import SubtitleSettings
import os
import sys
import re
from pathlib import Path

def get_asset_path(filename):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –≤ exe –∏ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    if getattr(sys, 'frozen', False):
        base_path = Path(sys._MEIPASS)
    else:
        base_path = Path(__file__).parent
    
    possible_paths = [
        base_path / 'assets' / filename,
        base_path / filename,
        Path('assets') / filename,
        Path(filename)
    ]
    
    for path in possible_paths:
        if path.exists():
            return str(path)
    
    return None

def get_safe_font_path(font_name):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —à—Ä–∏—Ñ—Ç—É"""
    if '.' not in font_name:
        return font_name
    
    asset_path = get_asset_path(font_name)
    if asset_path and os.path.exists(asset_path):
        return asset_path
    
    return "Arial"

def clean_subtitle_text(text):
    """–û—á–∏—Å—Ç–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–æ—á–∫–∏
    text = re.sub(r'\s+', ' ', text).strip()
    text = re.sub(r'\.{2,}', '...', text)  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
    
    # –£–¥–∞–ª—è–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–π –º—É—Å–æ—Ä
    if re.match(r'^[–û–æAa\.\s]+$', text):  # –¢–æ–ª—å–∫–æ "–û", "–ê", —Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        return ""
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã, —Å–æ—Å—Ç–æ—è—â–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑ —Ç–æ—á–µ–∫ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    if len(text.replace('.', '').replace(' ', '')) < 2:
        return ""
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    replacements = {
        r'\b—Å—â\b': '—Å—ä',
        r'\b—â[–∏—è]\b': '—â–∏',
        r'\b–ø—Ä[–∏—ñ]–≤[–µ—î]—Ç\b': '–ø—Ä–∏–≤–µ—Ç',
        r'\b–∫[–∞–æ]–∫\b': '–∫–∞–∫',
        r'\b–¥[–µ—ç]–ª[–∞–æ]\b': '–¥–µ–ª–∞',
    }
    
    for pattern, replacement in replacements.items():
        text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)
    
    # –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –±—É–∫–≤—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ (–∫—Ä–æ–º–µ –ø—Ä–µ–¥–ª–æ–≥–æ–≤)
    allowed_single_chars = {'–∞', '–∏', '–≤', '–∫', '—Å', '—É', '–æ', '—è'}
    words = text.split()
    if len(words) > 1:
        if len(words[0]) == 1 and words[0].lower() not in allowed_single_chars:
            words = words[1:]
        if len(words[-1]) == 1 and words[-1].lower() not in allowed_single_chars:
            words = words[:-1]
        text = ' '.join(words)
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    if len(text.strip()) < 2:
        return ""
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
    if text and len(text) > 1:
        text = text[0].upper() + text[1:]
    
    return text

def is_garbage_text(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –º—É—Å–æ—Ä–æ–º"""
    if not text or len(text.strip()) < 2:
        return True
    
    # –¢–µ–∫—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑ —Ç–æ—á–µ–∫ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    clean_text = text.replace('.', '').replace(' ', '').replace(',', '').replace('!', '').replace('?', '')
    if len(clean_text) < 2:
        return True
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –º—É—Å–æ—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    garbage_patterns = [
        r'^[–û–æAa\.\s]+$',  # –¢–æ–ª—å–∫–æ "–û", "–ê", —Ç–æ—á–∫–∏
        r'^\.+$',  # –¢–æ–ª—å–∫–æ —Ç–æ—á–∫–∏
        r'^[,\s\.]+$',  # –¢–æ–ª—å–∫–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        r'^\w\s*\.\s*\w$',  # –û–¥–Ω–∞ –±—É–∫–≤–∞, —Ç–æ—á–∫–∞, –æ–¥–Ω–∞ –±—É–∫–≤–∞
    ]
    
    for pattern in garbage_patterns:
        if re.match(pattern, text):
            return True
    
    return False

def create_subtitle_clip(text: str, duration: float, video_width: int, video_height: int, settings: SubtitleSettings) -> TextClip:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    try:
        # –û—á–∏—â–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç
        cleaned_text = clean_subtitle_text(text)
        formatted_text = format_subtitle_text(cleaned_text, settings.max_chars_per_line)
        safe_font = get_safe_font_path(settings.font)
        
        # –°—Ç–∏–ª—å –¥–ª—è –±–µ–ª—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å —Ö–æ—Ä–æ—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç—å—é
        font_color = "#FFFFFF"  # –ë–µ–ª—ã–π
        stroke_color = "#000000"  # –ß–µ—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        stroke_width = 2
        
        if settings.fixed_size:
            txt_clip = TextClip(
                formatted_text,
                fontsize=settings.font_size,
                color=font_color,
                font=safe_font,
                stroke_color=stroke_color,
                stroke_width=stroke_width,
                method='caption',
                size=(video_width * 0.8, None),  # –£–∂–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                bg_color=settings.bg_color if hasattr(settings, 'bg_color') else None,
                transparent=not hasattr(settings, 'bg_color')
            )
        else:
            txt_clip = TextClip(
                formatted_text,
                fontsize=settings.font_size,
                color=font_color,
                font=safe_font,
                stroke_color=stroke_color,
                stroke_width=stroke_width
            )
        
        txt_clip = txt_clip.set_duration(duration)
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        if settings.position == 'top':
            pos_y = settings.margin + 50  # –ß—É—Ç—å –Ω–∏–∂–µ –≤–µ—Ä—Ö–∞
        elif settings.position == 'bottom':
            pos_y = video_height - txt_clip.h - settings.margin - 50  # –ß—É—Ç—å –≤—ã—à–µ –Ω–∏–∑–∞
        else:
            pos_y = (video_height - txt_clip.h) / 2
        
        if settings.alignment == 'left':
            pos_x = settings.margin + 50
        elif settings.alignment == 'right':
            pos_x = video_width - txt_clip.w - settings.margin - 50
        else:
            pos_x = (video_width - txt_clip.w) / 2
        
        txt_clip = txt_clip.set_position((pos_x, pos_y))
        
        # –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        if settings.animation:
            txt_clip = txt_clip.crossfadein(0.5).crossfadeout(0.5)
        
        return txt_clip
        
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–∞: {e}")

def load_whisper_model_safe(model_name="base"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper –¥–ª—è exe"""
    try:
        model = whisper.load_model(model_name)
        return model
    except Exception as e:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper –º–æ–¥–µ–ª–∏: {e}")

def transcribe_audio_safe(model, audio_path, language="ru"):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    try:
        result = model.transcribe(
            audio_path,
            language=language if language != "auto" else "ru",  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä—É—Å—Å–∫–∏–π
            fp16=False,
            verbose=None,
            temperature=0.0,  # –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            best_of=3,  # –£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ
            no_speech_threshold=0.6  # –õ—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ—á—å
        )
        return result
        
    except Exception as e:
        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        try:
            result = model.transcribe(audio_path, language="ru")
            return result
        except Exception as e2:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e2}")

def add_subtitles_to_clip_advanced(clip_path: str, settings: SubtitleSettings, log_func) -> str:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∫ –∫–ª–∏–ø—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º"""
    import time
    from config import CFG
    
    start_time = time.time()
    log_func(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∫ {os.path.basename(clip_path)}", "INFO")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper
    try:
        model = load_whisper_model_safe(settings.whisper_model)
        log_func(f"ü§ñ –ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {settings.whisper_model}", "INFO")
    except Exception as e:
        log_func(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Whisper: {e}", "ERROR")
        return clip_path
    
    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    try:
        result = model.transcribe(
            audio_path,
            language="ru",  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä—É—Å—Å–∫–∏–π
            fp16=False,
            verbose=None,
            task="transcribe",  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            no_speech_threshold=0.8,  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—á–∏
            logprob_threshold=-0.5  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        )
        segments = result["segments"]
        log_func(f"üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤", "INFO")
            
    except Exception as e:
        log_func(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}", "ERROR")
        return clip_path
    
    # –°–¢–†–û–ì–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    filtered_segments = []
    for seg in segments:
        duration = seg["end"] - seg["start"]
        original_text = seg["text"].strip()
        confidence = seg.get('avg_logprob', 0) if 'avg_logprob' in seg else 0
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        cleaned_text = clean_subtitle_text(original_text)
        
        # –°–¢–†–û–ì–ò–ï –£–°–õ–û–í–ò–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò:
        is_valid_duration = (1.0 <= duration <= 12.0)  # –ë–æ–ª–µ–µ —É–∑–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
        is_not_garbage = not is_garbage_text(cleaned_text) and cleaned_text
        has_minimum_length = len(cleaned_text) >= 3  # –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞
        has_reasonable_confidence = confidence > -1.0  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        
        if all([is_valid_duration, is_not_garbage, has_minimum_length, has_reasonable_confidence]):
            formatted_text = format_subtitle_text(cleaned_text, settings.max_chars_per_line)
            seg["text"] = formatted_text
            filtered_segments.append(seg)
            log_func(f"‚úÖ –°–µ–≥–º–µ–Ω—Ç: '{cleaned_text[:40]}...' ({duration:.1f}—Å, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})", "DEBUG")
        else:
            log_func(f"‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: '{original_text[:40]}...' (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})", "DEBUG")
    
    log_func(f"üìÑ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞: {len(filtered_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤", "INFO")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ö–æ—Ä–æ—à–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–ø
    if not filtered_segments:
        log_func("‚ö†Ô∏è –ù–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤", "WARNING")
        return clip_path
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
    try:
        video = VideoFileClip(clip_path)
        video_w, video_h = video.size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ
        log_func(f"üìπ –§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: {video_w}x{video_h}", "DEBUG")
    except Exception as e:
        log_func(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}", "ERROR")
        return clip_path
    
    # –°–æ–∑–¥–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    subtitle_clips = []
    for i, segment in enumerate(filtered_segments):
        start = segment["start"]
        end = segment["end"]
        text = segment["text"]
        duration = end - start
        
        try:
            txt_clip = create_subtitle_clip(text, duration, video_w, video_h, settings)
            txt_clip = txt_clip.set_start(start)
            subtitle_clips.append(txt_clip)
            log_func(f"üìù –°—É–±—Ç–∏—Ç—Ä {i+1}: '{text[:40]}...' ({start:.1f}-{end:.1f}—Å)", "DEBUG")
        except Exception as e:
            log_func(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–∞ {i+1}: {e}", "WARNING")
            continue
    
    # –ö–æ–º–ø–æ–∑–∏—Ç–∏–º –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        if subtitle_clips:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–ª–∏–ø—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
            final_video = CompositeVideoClip([video] + subtitle_clips)
            log_func(f"üé® –ö–æ–º–ø–æ–∑–∏—Ç: {len(subtitle_clips)} —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ", "INFO")
        else:
            final_video = video
            log_func("‚ö†Ô∏è –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã", "WARNING")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        import pathlib
        original_path = pathlib.Path(clip_path)
        output_path = original_path.parent / f"{original_path.stem}_with_subs.mp4"
        
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        final_video.write_videofile(
            str(output_path), 
            codec="libx264", 
            audio_codec="aac", 
            verbose=False, 
            logger=None,
            threads=4,
            temp_audiofile=str(CFG["TEMP_DIR"] / "temp_audio.m4a"),
            ffmpeg_params=['-pix_fmt', 'yuv420p']  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø—ã
        video.close()
        for clip in subtitle_clips:
            clip.close()
        if subtitle_clips:
            final_video.close()
        
        process_time = time.time() - start_time
        log_func(f"‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {output_path.name} (–≤—Ä–µ–º—è: {process_time:.1f}—Å)", "INFO")
        return str(output_path)
        
    except Exception as e:
        log_func(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏: {e}", "ERROR")
        try:
            video.close()
        except:
            pass
        return clip_path